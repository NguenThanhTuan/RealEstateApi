// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealEstateApi.Data;

#nullable disable

namespace RealEstateApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518023900_CheckSc")]
    partial class CheckSc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealEstateApi.Models.AppConfigM", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("key")
                        .HasColumnType("text");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("RealEstateApi.Models.District", b =>
                {
                    b.Property<int>("districtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("districtId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("provinceId")
                        .HasColumnType("integer");

                    b.HasKey("districtId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("RealEstateApi.Models.NotificationRead", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<int>("notificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("readAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("notificationId");

                    b.HasIndex("userId");

                    b.ToTable("NotificationReads");
                });

            modelBuilder.Entity("RealEstateApi.Models.Notifications", b =>
                {
                    b.Property<int>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("notificationId"));

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("data")
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .HasColumnType("text");

                    b.Property<int>("realEstateId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("notificationId");

                    b.HasIndex("realEstateId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RealEstateApi.Models.Province", b =>
                {
                    b.Property<int>("provinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("provinceId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("provinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("RealEstateApi.Models.RealEstateImages", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("imageId"));

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("realEstateId")
                        .HasColumnType("integer");

                    b.HasKey("imageId");

                    b.HasIndex("realEstateId");

                    b.ToTable("RealEstateImages");
                });

            modelBuilder.Entity("RealEstateApi.Models.RealEstates", b =>
                {
                    b.Property<int>("realEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("realEstateId"));

                    b.Property<float>("area")
                        .HasColumnType("real");

                    b.Property<int?>("bathrooms")
                        .HasColumnType("integer");

                    b.Property<int?>("bedrooms")
                        .HasColumnType("integer");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("direction")
                        .HasColumnType("text");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("floors")
                        .HasColumnType("integer");

                    b.Property<float>("length")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("postedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<string>("province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("roadWidth")
                        .HasColumnType("real");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ward")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("width")
                        .HasColumnType("real");

                    b.HasKey("realEstateId");

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("RealEstateApi.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userId"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deviceId")
                        .HasColumnType("text");

                    b.Property<string>("fcmToken")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("platform")
                        .HasColumnType("text");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RealEstateApi.Models.Ward", b =>
                {
                    b.Property<int>("wardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("wardId"));

                    b.Property<int>("districtId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("wardId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("RealEstateApi.Models.NotificationRead", b =>
                {
                    b.HasOne("RealEstateApi.Models.Notifications", "Notifications")
                        .WithMany("NotificationReads")
                        .HasForeignKey("notificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateApi.Models.User", "User")
                        .WithMany("NotificationReads")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateApi.Models.Notifications", b =>
                {
                    b.HasOne("RealEstateApi.Models.RealEstates", "RealEstate")
                        .WithMany()
                        .HasForeignKey("realEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("RealEstateApi.Models.RealEstateImages", b =>
                {
                    b.HasOne("RealEstateApi.Models.RealEstates", "realEstate")
                        .WithMany("images")
                        .HasForeignKey("realEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("realEstate");
                });

            modelBuilder.Entity("RealEstateApi.Models.Notifications", b =>
                {
                    b.Navigation("NotificationReads");
                });

            modelBuilder.Entity("RealEstateApi.Models.RealEstates", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("RealEstateApi.Models.User", b =>
                {
                    b.Navigation("NotificationReads");
                });
#pragma warning restore 612, 618
        }
    }
}
